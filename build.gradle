// Gradle repositories and dependencies
buildscript
{
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
		classpath 'org.ajoberstar:grgit:1.4.+'
	}
}

plugins {
	id "java"
	id "com.github.hierynomus.license" version "0.11.0"
	id "eclipse"
	id "idea"
}
apply plugin: 'net.minecraftforge.gradle.forge'

idea { module { inheritOutputDirs = true } }

defaultTasks 'licenseFormat', 'build'

// Minimum version of Java required
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

ext {
	git = org.ajoberstar.grgit.Grgit.open(file('.'))

	//used for license header
	projectName = 'Cubic Chunks Mod'
	inceptionYear = '2015'

	//versioning related data
	isFinalBuild = false
	//-1 means none
	lastMinorVersion = -1
}

group = "cubichunks"
archivesBaseName = "CubicChunks"
version = getModVersionAndWriteToFile("${git.describe()}", lastMinorVersion, isFinalBuild)

minecraft {
	version = "1.8.8-11.15.0.1609-1.8.8"
	runDir = "run"

	// the mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   snapshot are built nightly.
	// stable_#            stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not allways worke.
	// simply re-run your setup task after changing the mappings to update your workspace.
	mappings = "snapshot_20151207"
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	replace "@@VERSION@@", project.version
	replaceIn "cubicchunks/CubicChunks.java"

}

reobfJar {
	addExtraSrgLine "PK: org/mapdb cubicchunks/org/mappdb"
	addExtraSrgLine "PK: com/flowpowered cubicchunks/com/flowpowered"
}

// Project repositories
repositories
{
	mavenCentral()
	maven
	{
		name 'sonatype'
		url 'https://oss.sonatype.org/content/groups/public/'
	}
}

configurations {
	shade
	compile.extendsFrom shade
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

	shade 'com.flowpowered:flow-noise:1.0.1-SNAPSHOT'
	shade 'org.mapdb:mapdb:1.0.7'
	testCompile 'junit:junit:4.11'

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


// License header formatting
license {
	ext.project = projectName
	ext.year = inceptionYear
	exclude "**/*.info"
	exclude "assets/*"
	header file('HEADER.txt')
	ignoreFailures false
	strictCheck true
	mapping {
		java = 'SLASHSTAR_STYLE'
	}
}

jar {
	manifest {
		attributes 'FMLAT': 'cubicchunks_at.cfg'
		attributes 'FMLCorePlugin': 'cubicchunks.asm.CoreModLoadingPlugin', 'FMLCorePluginContainsFMLMod': 'true'
	}
	configurations.shade.each { dep ->
		from(project.zipTree(dep)){
			exclude 'META-INF', 'META-INF/**'
		}
	}
}

//returns version string according to this: http://mcforge.readthedocs.org/en/latest/conventions/versioning/
//format: MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH(-final/rcX/betaX)
//rcX and betaX are not implemented yet
private String getModVersionAndWriteToFile(String describe, int lastMinor, boolean isFinal) {
	String[] parts = describe.split("-");

	if(parts.length < 2) {
		System.out.println("Unknown version format: " + describe);
		//we don't know the version, so return 0.0.0.0
		return "X.Y-0.0.0.0" + (isFinal ? "-final" : "");
	}
	//the first part is MCX.X.X from the TAG
	if(!parts[0].startsWith("MC")) {
		System.out.println("Unknown MC version " + describe + " (" + parts[0] + ")");
		return "X.Y-0.0.0.0" + (isFinal ? "-final" : "");
	}
	//strip down the MC part
	String mcVersion = parts[0].substring("MC".length());
	//next we have MAJORMOD.MAJORAPI from the TAG
	//it should contain a dot in the middle
	if(!parts[1].contains(".")) {
		System.out.println("Unknown mod version " + describe + " (" + parts[1] + ")");
		return mcVersion + "-0.0.0.0" + (isFinal ? "-final" : "");
	}
	String modAndApiVersion = parts[1];
	//next we eighter have commit-since-tag or nothing
	int commitSinceTag = 0;
	if(parts.length > 2) {
		try {
			commitSinceTag = Integer.parseInt(parts[2]);
		}catch(NumberFormatException ex) {
			//ignore the error and assume 0
			ex.printStackTrace();
		}
	}

	int minor;
	int patch;
	if(lastMinor == -1) {
		minor = commitSinceTag;
		patch = 0;
	} else {
		minor = lastMinor;
		patch = commitSinceTag - lastMinor;
	}
	String version = String.format("%s-%s.%d.%d%s", mcVersion, modAndApiVersion, minor, patch, isFinal ? "-final" : "");

	//write to file
	File file = new File("VERSION");
	PrintWriter pw = null;
	try {
		if(file.exists()) {
			file.delete();
		}
		file.createNewFile();
		pw = new PrintWriter(new FileOutputStream(file));
		pw.println("VERSION=" + version);
	} catch(IOException ex) {
		ex.printStackTrace();
	} finally {
		if(pw != null) {
			try{pw.close()}catch(IOException ex){}
		}
	}

	return version;
}